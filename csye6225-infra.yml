Description:  This template deploys a VPC.

Parameters:
  DNSDomain:
    Description: Please enter the domain
    Type: String
    Default: ""
  DatabaseUser:
    Description: Please enter Database name
    Type: String
    Default: ""

  DatabasePassword:
    Description: Please enter Database password
    Type: String
    Default: ""

  DatabaseName:
    Description: Please enter Database Name
    Type: String
    Default: ""
  S3BucketName:
    Description: Please enter unique bucket name
    Type: String
    Default: ""

  AmiID:
    Description: Please enter the AMI ID 
    Type: String
    Default: ""
    
  VpcCIDR:
    Description: Please enter the IP range
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range for he public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PublicSubnet3CIDR:
    Description: Please enter the IP range for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  AZ1:
    Description: Availability Zone 1
    Type: Number
    Default: 0

  AZ2:
    Description: Availability Zone 2
    Type: Number
    Default: 1
  
  AZ3:
    Description: Availability Zone 3
    Type: Number
    Default: 2

  ExpirationMinute:
    Description: Minutes for expiration of token
    Type: Number
    Default: 2




Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName    

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 5, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 6, 8 ]]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ !Ref AZ1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ !Ref AZ2, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ !Ref AZ3, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  # DefaultPrivateRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3


  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3



  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
         Ref: VPC
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"



  InstanceSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Ref: VPC
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          SourceSecurityGroupId:
            Fn::GetAtt:
              - LoadBalancerSecurityGroup
              - GroupId




  database:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: 
        Ref: VPC
      GroupDescription: Allow http to client host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: 
            Fn::GetAtt:
              - InstanceSecGroup
              - GroupId
          

  



  RDSParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description:  MySQL Parameter Group
      Family: mysql8.0
      Parameters:
        sql_mode: IGNORE_SPACE

  RDSPrivateSubnetGroup:
    Type : AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub RDS Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3


  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      KmsKeyId: !Ref KmsRdsKey
      StorageEncrypted: true
      DBInstanceIdentifier : csye6225
      DBInstanceClass : db.t3.micro
      DBName : !Ref DatabaseName #########
      Engine : MySql
      EngineVersion : 8.0.27
      AllocatedStorage : 8
      MultiAZ : false
      MasterUsername : !Ref DatabaseUser #######
      MasterUserPassword : !Ref DatabasePassword #########
      VPCSecurityGroups : [!Ref database]
      DBParameterGroupName : !Ref RDSParameterGroup
      PubliclyAccessible : false
      DBSubnetGroupName : !Ref RDSPrivateSubnetGroup

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ChangingStorageClassFromStandardToStandardIA
            Transitions: 
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
            Status: Enabled
            ExpirationInDays: 90
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256


  EC2CSYE6225Role:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: EC2-CSYE6225
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"
      Policies:
        - PolicyName: WebAppS3
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                 - s3:GetObject
                 - s3:PutObject
                 - s3:DeleteObject
                 - s3:ListBucket
                Resource:
                  - !Join ["", ["arn:aws:s3:::", !Ref S3Bucket]]
                  - !Join ["", ["arn:aws:s3:::", !Ref S3Bucket, "/*"]]


  S3BucketIAMInstance:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EC2CSYE6225Role
    Properties: 

      InstanceProfileName: S3BucketIAMInstanceProfileName
      Path: /
      Roles:
        - !Ref EC2CSYE6225Role


  # DNSHost:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneName: !Ref DNSDomain #prod.arjuntiwari.me.
  #     Name: !Ref DNSDomain #prod.arjuntiwari.me.
  #     Type: A
  #     TTL: 900
  #     ResourceRecords:
  #     - !GetAtt Ec2Instance.PublicIp


  
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        - "arn:aws:iam::aws:policy/AmazonSNSFullAccess"


  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: nodejs16.x
      Handler: index.handler
      Code:
        ZipFile: |
          console.log("in lambda function by cft");


      FunctionName: MailInvoke
      Description: Function to be invoked by sns topic and responsible for email services

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: EmailVerification
      DisplayName: EmailVerification
      Subscription:
        - Protocol: lambda
          Endpoint: !GetAtt LambdaFunction.Arn

  SNSTopicPolicy:
    Type: AWS::IAM::Policy 
    Properties: 
      PolicyDocument:
        Version: '2008-10-17'
        Statement: 
          - Effect: Allow
            Action: 
              - sns:Publish
            Resource:
              - !Ref SNSTopic
      PolicyName: SNSEmailPolicy
      Roles: 
        - !Ref EC2CSYE6225Role


  SNSTopicPermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      Principal: "sns.amazonaws.com"
      FunctionName: !GetAtt LambdaFunction.Arn
      SourceArn: !Ref SNSTopic


  DynamoDBEmailTable:

    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "Email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "myDynamoDBEmailTable"


  DynamoDBTokenTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "Token"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      KeySchema:
        - AttributeName: "Token"
          KeyType: "HASH"
      TableName: "myDynamoDBTokenTable"
      TimeToLiveSpecification:
        AttributeName: TokenTTL
        Enabled: true


  DynamoDBTokenTablePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: DynamoDBTokenPolicy
      Roles: 
        - !Ref EC2CSYE6225Role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - 'dynamodb:List*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeTimeToLive'

            Resource: 
              - '*'

          - Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Query'
              - 'dynamodb:Delete*'
              - 'dynamodb:Update*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:PutItem'
              - 'dynamodb:Get*'
              - 'dynamodb:Scan'
              - 'dynamodb:CreateTable'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:BatchGet*'

            Resource: 
            - !GetAtt DynamoDBTokenTable.Arn

  DynamoDBEmailTablePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: DynamoDBEmailPolicy
      Roles: 
        - !Ref LambdaFunctionRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - 'dynamodb:List*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeTimeToLive'

            Resource: 
              - '*'

          - Effect: Allow
            Action:
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Query'
              - 'dynamodb:Delete*'
              - 'dynamodb:Update*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:PutItem'
              - 'dynamodb:Get*'
              - 'dynamodb:Scan'
              - 'dynamodb:CreateTable'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:BatchGet*'

            Resource: 
            - !GetAtt DynamoDBEmailTable.Arn


  AutoScalingStack:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-auto-scaling-group
      AvailabilityZones:
        - !Select [0, !GetAZs '']
        - !Select [1, !GetAZs '']
        - !Select [2, !GetAZs '']
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      MinSize: 1
      MaxSize: 3
      Cooldown: "300"
      DesiredCapacity: 3
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      LaunchTemplate: 
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber

  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - RDSInstance
      - S3Bucket
      - S3BucketIAMInstance
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-web-app-launch-template #this will be passed for updation myvpc/myvpcarjun
      LaunchTemplateData: 
        BlockDeviceMappings:
          - DeviceName: "/dev/sdm"
            Ebs:
              Encrypted: true
              VolumeSize: "20"
              VolumeType: "gp2"
              DeleteOnTermination: "true"
              KmsKeyId: !GetAtt KmsEbsKey.Arn
        InstanceType: t2.micro
        ImageId: !Ref AmiID
        KeyName: aws_mac
        SecurityGroupIds: 
          - !Ref InstanceSecGroup
        IamInstanceProfile:
          Arn: !GetAtt
            - S3BucketIAMInstance
            - Arn
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            cat > /etc/environment << 'EOF'

              export DB_HOST=${RDSInstance.Endpoint.Address}
              export DB_USER=${DatabaseUser}
              export AWS_BUCKET=${S3BucketName}
              export DB_NAME=${DatabaseName}
              export DB_PASSWORD=${DatabasePassword}
              export ARN_TOPIC_SNS=${SNSTopic}
              export TOKEN_TTL_EXPIRY=${ExpirationMinute}
            EOF
            source /etc/profile
            echo "Done with setting environment variables"
            sudo apt-get update -y
            sudo pm2 reload all --update-env

            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/home/ubuntu/webapp/cloudwatch-config.json
          



  EC2LoadBalance: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      IpAddressType: ipv4
      Name: EC2LoadBalancer
      Scheme: internet-facing
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Type: application
 
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: LoadBalancerTargetGroup
      TargetType: instance
      Protocol: HTTP
      Port: 9000
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: /healthz
      HealthCheckPort: 9000
      HealthCheckProtocol: HTTP
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 5


  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref EC2LoadBalance
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup


  DNSWebApp:
    Type: AWS::Route53::RecordSet
    DependsOn: EC2LoadBalance
    Properties:
      HostedZoneName: !Ref DNSDomain #prod.arjuntiwari.me.
      Name: !Ref DNSDomain #prod.arjuntiwari.me.
      Type: A
      AliasTarget:
        DNSName: !GetAtt EC2LoadBalance.DNSName
        HostedZoneId: !GetAtt EC2LoadBalance.CanonicalHostedZoneID
 




  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingStack
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingStack
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1


  CPUHighUsage:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU High Usage Alarm
      AlarmDescription: Trigger CPU alarm for thrreshold more than 3
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      AlarmActions:
        - !Ref ScaleUpPolicy
      Statistic: Average
      Period: 300
      Threshold: 3
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingStack


  CPULowUsage:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPU Low Usage Alarm
      AlarmDescription: Trigger CPU alarm for threshold less than 2
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      AlarmActions:
        - !Ref ScaleDownPolicy
      Statistic: Average
      Period: 300
      Threshold: 2
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingStack


  KmsRdsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption for RDS
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-rds
        Statement:
          - Sid: Encryption for RDS
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::116759853696:root
            Action: 'kms:*'
            Resource: '*'



  KmsEbsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption for EBS Volume
      KeyPolicy:
        Version: "2012-10-17"
        Id: key-default-ebs
        Statement:
          - Sid: Encryption of EBS Volume
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::116759853696:root
                - arn:aws:iam::116759853696:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
            Action: 'kms:*'
            Resource: '*'




  



     


  



  
  

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]

 
  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3


#aws --region us-east-1 --profile dev cloudformation create-stack --stack-name arjunVPCParam --template-body file://csye6225-infra.yml --parameters ParameterKey=VpcCIDR,ParameterValue="10.192.0.0/16" ParameterKey=PublicSubnet1CIDR,ParameterValue="10.192.10.0/24" ParameterKey=PublicSubnet2CIDR,ParameterValue="10.192.11.0/24" ParameterKey=PublicSubnet3CIDR,ParameterValue="10.192.25.0/24" ParameterKey=AZ1,ParameterValue=0 ParameterKey=AZ2,ParameterValue=1 ParameterKey=AZ3,ParameterValue=001 ParameterKey=AmiID,ParameterValue="ami-09f57af0092bf04f9"
name: AWS AMI using Packer Config



on:

  push:

    branches: [ main ]

  workflow_dispatch:



jobs:

  packer:

    env:
      AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
      AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
    

    runs-on: ubuntu-latest

    permissions:

      id-token: write

      contents: read

    name: AMI Creation.

    steps:

      - name: Check Repository

        uses: actions/checkout@v2


      - name: Zip all the webapp imp files
        run: |
          zip -r webapp.zip ./
          pwd ./webapp


      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        

      - name: Start AMI
        run: |
              packer build --var-file=amiFinal.pkrvars.hcl amiFinal.pkr.hcl 
              
              
              
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}

      - name: Get AMI Id
        run: |
              echo "AMI_ID=$(jq -r '.builds[-1].artifact_id' output.json | cut -d ":" -f2)" >> $GITHUB_ENV
              echo "AMI Id"
              echo ${{ env.AMI_ID}}

      - name: Check if env var works
        run: echo ${{ env.AMI_ID}}


      - name: Reconfigure AWS Credentials for Prod account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: us-east-1



      - name: Create Launch Template Copy
        run: | 
              aws ec2 create-launch-template-version --launch-template-name myVPC-web-app-launch-template --launch-template-data '{"ImageId":"${{ env.AMI_ID}}"}'

      - name: Update Auto Scale Group 
        run: |
              aws autoscaling update-auto-scaling-group --auto-scaling-group-name myVPC-auto-scaling-group --launch-template LaunchTemplateName=myVPC-web-app-launch-template,Version='$Latest'

      - name: Refresh Instance
        run: |
              aws autoscaling start-instance-refresh --auto-scaling-group-name myVPC-auto-scaling-group



            


